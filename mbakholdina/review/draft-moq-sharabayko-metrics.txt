



Independent Submission                                  M. P. Sharabayko
Request for Comments: 0                                 M. A. Sharabayko
Category: Informational                    Haivision Network Video, GmbH
ISSN: 2070-1721                                          21 October 2022


 Media over QUIC - Estimating Transmission Metrics on a QUIC Connection

Abstract

   This document defines an approach of objectively measuring
   transmission delay, jitter, and other performance metrics for a QUIC
   [RFC9000] connection using an artificially generated payload of a
   specific structure.

   TODO (Maxim): at an application level?

Status of This Memo

   This document is not an Internet Standards Track specification; it is
   published for informational purposes.

   This is a contribution to the RFC Series, independently of any other
   RFC stream.  The RFC Editor has chosen to publish this document at
   its discretion and makes no statement about its value for
   implementation or deployment.  Documents approved for publication by
   the RFC Editor are not candidates for any level of Internet Standard;
   see Section 2 of RFC 7841.

   Information about the current status of this document, any errata,
   and how to provide feedback on it may be obtained at
   https://www.rfc-editor.org/info/rfc0.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.

Table of Contents

   1.  Introduction
     1.1.  Requirements Notation
   2.  Conventions and Definitions
   3.  Payload Format
   4.  Performance Metrics
     4.1.  Transmission Delay
     4.2.  Interarrival Jitter
     4.3.  Time-Stamped Delay Factor (TS-DF)
     4.4.  Total Number of Received Payloads
     4.5.  Total Number of Missing Payloads
     4.6.  Total Number of Reordered Payloads and Reordering Distance
     4.7.  The Number of Corrupted Payloads
     4.8.  The Number of Duplicated Payloads
   5.  Security Considerations
   6.  IANA Considerations
   7.  Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   TODO (Maria): Media over QUIC has emerged.

   // refer to https://datatracker.ietf.org/doc/draft-gruessing-moq-
   requirements/

   For live media contribution, where processing of data takes place in
   real time, it is important to estimate transmission delay and delay
   variation (or jitter), to determine data loss and reordering, as well
   as to calculate other transmission metrics.  The lower the observed
   jitter level, the smaller the decoder buffer needed, and the higher
   the confidence we can have in a given transmission latency setting.

   The current draft discusses an approach of objectively measuring
   transmission delay, jitter, and other performance metrics Section 4
   for a QUIC [RFC9000] connection using an artificially generated
   payload of a specific structure Section 3.  Both streams [RFC9000]
   and unreliable datagrams [RFC9221] are going to be supported,
   however, for the time being performance metrics Section 4 are defined
   for datagrams only.

   TODO (Maxim): at an application level, application protocol level

   The suggested approach could be used during the Media over QUIC
   protocol development to:

   *  compare the independent implementations of the protocol and/or
      perform regression testing of the same implementation,

   *  evaluate various congestion control schemes considered for
      including in the protocol,

   *  evaluate protocol performance and transmission efficiency using
      either STREAM or DATAGRAM frames.

   TODO (Maria or later): Why not to simply use QUIC statistics provided
   by the library.  Provide motivation for these

   // When a QUIC endpoint receives a valid DATAGRAM frame, it SHOULD
   deliver the data to the application immediately, as long as it is
   able to process the frame and can store the contents in memory.

   TODO (Maxim): - Idea of generating payloads of variable length to
   emulate I, P, B frames and different scenarious. - We need a method
   to compare streams and datagrams at the same amount of data ->
   message number, groups of datagrams.

1.1.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Payload Format

   A payload of a specific format Figure 1 MUST be artificially
   generated to enable performance metrics calculation at the receiver
   side.

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                     Payload Sequence Number                   |
     |                           (64 bit)                            |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                       NTP 64-Bit Timestamp                    |
     |                           (64 bit)                            |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                    Monotonic Clock Timestamp                  |
     |                           (64 bit)                            |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                        Payload Length                         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                         MD5 Checksum                          |
     |                                                               |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                       Remaining Payload                       |
     |                                                               |
                                   (...)
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                        Figure 1: Payload Structure

   Payload Sequence Number: 64 bits.  A sequential number of the
      payload.  Starts from zero and is incremented for every payload
      that follows.

   NTP 64-Bit Timestamp: 64 bits.  NTP 64-bit system clock timestamp
      [RFC5905] [RFC8877] of the moment when a payload has been
      generated meaning the payload generation has finished.

   Monotonic Clock Timestamp: 64 bits.  Monotonic clock timestamp of the
      moment when a payload has been generated.  Represents microseconds
      elapsed since monotonic clock epoch.

   Payload Length: 32 bits.  The full length of the payload (including
      preceding "Payload Sequence Number" and both timestamp fields).

   MD5 Checksum: 128 bits.  A hash value to confirm the payload
      integrity.  Calculated for the whole message with the SHA-128
      checksum field zeroed out.

   Remaining Payload: variable length.  The remaining payload of
      variable length.  Randomly generated sequence of bytes.  MAY be
      generated as a sequence of 8-bit integers starting with value of
      the remainder after dividing the Payload Sequence Number by 32 and
      followed by sequentially increasing values.

   In the case of QUIC streams, the payload can be as long as the
   specified stream length and MUST fit within the stream.  As stream
   data is sent in the form of STREAM frames, the very first frame will
   contain Payload Sequence Number, NTP 64-Bit Timestamp, Monotonic
   Clock Timestamp, Payload Length, and MD5 Checksum fields, as well as
   some of the remaining payload data.  Consequent STREAM frames will
   carry the rest of the payload.

   In the case of QUIC datagrams, the payload MUST fit into a single
   DATAGRAM frame.  The Payload Sequence Number field MUST be increased
   for each sent DATAGRAM frame.

   TODO (Maxim): Messages !!! Then change a bit the text above.

4.  Performance Metrics

   The calculation of the following metrics is suggested to be included
   in the scope:

   *  Transmission Delay (or Latency) Section 4.1,

   *  Interarrival Jitter as per [RFC3550] Section 4.2,

   *  Time-Stamped Delay Factor (TS-DF) Section 4.3,

   *  Total Number of Received Payloads Section 4.4,

   *  Total Number of Missing Payloads Section 4.5,

   *  Total Number of Reordered Payloads and Reordering Distance
      Section 4.6,

   *  and others metrics as defined below.

   The RECOMMENDED measurement period is 1 second, however, alternative
   period length is also possible.  This value is dictated by the TS-DF
   metric specification [EBU3337].

4.1.  Transmission Delay

   Transmission Delay (or Latency) is measured based on the system clock
   (NTP 64-Bit Timestamp Figure 1).  It is RECOMMENDED to synchronize
   the clocks on both sender and receiver machines before an experiment
   so that an error associated with a clock drift is as less as
   possible.

   Transmission Delay (TD) sample is calculated at the receiver side at
   the moment a payload is received by an application:

   TD = T_NTP_RCV - T_NTP_SND

   where - T_NTP_RCV is the system clock time when the payload arrives
   at the receiver.  Note that for QUIC streams, the T_NTP_RCV is the
   time when the very last byte of a stream is received by an
   application. - T_NTP_SND is the NTP 64-Bit Timestamp value extracted
   from the payload.

   Note that TD value will be affected by the clock drift, the
   difference in the system time of the two clocks at the sender and at
   the receiver.

   Minimum (TD_MIN) and maximum (TD_MAX) delay estimates MUST be reset
   to "not available" (N/A) at the start of each measurement period
   while the smoothed value (TD_SMOOTHED) MUST NOT be reset and the
   calculation SHOULD continue during the entire experiment.  Here and
   throughout the current document, smoothing means applying an
   exponentially weighted moving average (EWMA).

   TD_MIN = MIN(TD_MIN, TD);
   TD_MAX = MAX(TD_MAX, TD);
   TD_SMOOTHED = EWMA(TD_SMOOTHED, TD).

4.2.  Interarrival Jitter

   Interarrival Jitter is calculated as defined in [RFC3550].  It is
   based on the concept of the Relative Transit Time between pairs of
   consecutive payloads received not necessarily in sequence (meaning
   that reordering is ignored), and is defined to be the smoothed
   average of the difference in payloads spacing at the receiver
   compared to the sender for a pair of payloads.

   The calculation is based on the Monotonic Clock Timestamp Figure 1
   extracted from the payload.  As jitter is calculated as an EWMA of
   delay variations, it MUST NOT be reset at the start of each
   measurement period.

4.3.  Time-Stamped Delay Factor (TS-DF)

   Time-Stamped Delay Factor metric is calculated as defined in
   [EBU3337].

   The calculation of TS-DF samples is based on the Monotonic Clock
   Timestamp Figure 1 extracted from the payload.  Unlike the algorithm
   defined in [RFC3550], TS-DF one does not use a smoothing factor and
   therefore gives a very accurate instantaneous result.

4.4.  Total Number of Received Payloads

   A counter is initialized with zero and incremented on each payload
   read.  The value MUST NOT be reset at the start of each measurement
   period.

4.5.  Total Number of Missing Payloads

   A counter is initialized with zero and is incremented each time a
   discontinuity in consecutive payloads sequence numbers (Payload
   Sequence Number Figure 1) is determined.  Missing sequence numbers
   MUST be recorded.  The counter is decremented by one once a payload
   with missing sequence number is received out of order.  The value
   MUST NOT be reset at the start of each measurement period.

4.6.  Total Number of Reordered Payloads and Reordering Distance

   A counter is initialized with zero and is incremented each time the
   Payload Sequence Number Figure 1 value precedes the next Expected
   Payload Sequence Number.

   The next Expected Payload Sequence Number is initialized with zero
   and is updated if the Payload Sequence Number value of a received
   payload incremented by one exceeds the current Expected Payload
   Sequence Number value.

   The value MUST NOT be reset at the start of each measurement period.

   TODO: Reordering Distance.

4.7.  The Number of Corrupted Payloads

   TODO

4.8.  The Number of Duplicated Payloads

   TODO

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   This document has no IANA actions.

7.  Normative References

   [EBU3337]  The European Broadcasting Union, "TS-DF Algorithm to
              Measure Network Jitter on RTP Streams", n.d.,
              <https://tech.ebu.ch/publications/tech3337>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.
              Jacobson, "RTP: A Transport Protocol for Real-Time
              Applications", STD 64, RFC 3550, DOI 10.17487/RFC3550,
              July 2003, <https://www.rfc-editor.org/rfc/rfc3550>.

   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,
              "Network Time Protocol Version 4: Protocol and Algorithms
              Specification", RFC 5905, DOI 10.17487/RFC5905, June 2010,
              <https://www.rfc-editor.org/rfc/rfc5905>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8877]  Mizrahi, T., Fabini, J., and A. Morton, "Guidelines for
              Defining Packet Timestamps", RFC 8877,
              DOI 10.17487/RFC8877, September 2020,
              <https://www.rfc-editor.org/rfc/rfc8877>.

   [RFC9000]  Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

   [RFC9221]  Pauly, T., Kinnear, E., and D. Schinazi, "An Unreliable
              Datagram Extension to QUIC", RFC 9221,
              DOI 10.17487/RFC9221, March 2022,
              <https://www.rfc-editor.org/rfc/rfc9221>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Maxim Sharabayko
   Haivision Network Video, GmbH
   Email: maxsharabayko@haivision.com


   Maria Sharabayko
   Haivision Network Video, GmbH
   Email: msharabayko@haivision.com
